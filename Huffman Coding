import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.List;
import java.util.Comparator;
import java.util.Collections;

public class App {
    public static void main(String[] args) {
        System.out.println("Hello world");

        HuffmanTree tree = generateHuffmanTree("Hello world! This is a test message.");
        tree.print();
        System.out.println("Encoded (H): " + tree.encode("H"));
        System.out.println("Encoded (space): " + tree.encode(" "));
        System.out.println("Encoded (e): " + tree.encode("e"));
        
        String encoded = tree.encode("Hello world! This is a test message.");
        System.out.println("Encoded: " + encoded);
        
        System.out.println("Decoded: " + tree.decode(encoded));
    }

    public static HuffmanTree generateHuffmanTree(String message) {
        // calculate the frequencies of characters
        Map<Character, Integer> frequencyMap = new HashMap<Character, Integer>();
        for (char c: message.toCharArray()) {
            if (frequencyMap.containsKey(c)) {
                frequencyMap.put(c, frequencyMap.get(c) + 1);
            } else {
                frequencyMap.put(c, 1);
            }
        }

        // create the tree nodes
        List<HuffmanTreeNode> queue = new ArrayList<HuffmanTreeNode>();
        for (Map.Entry<Character, Integer> entry: frequencyMap.entrySet()) {
            queue.add(new HuffmanTreeNode(entry.getKey(), entry.getValue()));
        }

        // sort the nodes by frequency
        Collections.sort(queue, new Comparator<HuffmanTreeNode>() {
            @Override
            public int compare(HuffmanTreeNode o1, HuffmanTreeNode o2) {
                return o1.getFrequency() - o2.getFrequency();
            }
        });

        // when we still have more than 1 item in the queue
        while (queue.size() > 1) {
            // merge the two nodes with the lowest frequency
            HuffmanTreeNode left = queue.remove(0);
            HuffmanTreeNode right = queue.remove(0);
            HuffmanTreeNode parent = new HuffmanTreeNode('\0', left.getFrequency() + right.getFrequency(), left, right);

            // add the parent node back to the queue and sort again
            queue.add(parent);
            Collections.sort(queue, new Comparator<HuffmanTreeNode>() {
                @Override
                public int compare(HuffmanTreeNode o1, HuffmanTreeNode o2) {
                    return o1.getFrequency() - o2.getFrequency();
                }
            });
        }
        return new HuffmanTree(queue.get(0));
    }
}

class HuffmanTree {
    private HuffmanTreeNode root;

    public HuffmanTree(HuffmanTreeNode root) {
        this.root = root;
    }

    public String encode(String message) {
        StringBuilder sb = new StringBuilder();
        for (char c: message.toCharArray()) {
            sb.append(root.encode(c));
        }
        return sb.toString();
    }

    public String decode(String encoded) {
        StringBuilder sb = new StringBuilder();

        // search from the root
        HuffmanTreeNode cur = root;
        for (char c: encoded.toCharArray()) {
            if (c == '0') {
                cur = cur.getLeft();
            } else {
                cur = cur.getRight();
            }
            if (cur.isLeaf()) {
                // leaf node includes the character
                sb.append(cur.getValue());

                // reset the current node to the root
                cur = root;
            }
        }
        return sb.toString();
    }

    public void print() {
        root.print();
    }
}

class HuffmanTreeNode {
    private char value;
    private int frequency;
    private HuffmanTreeNode left;
    private HuffmanTreeNode right;

    public HuffmanTreeNode(char value, int frequency) {
        this.value = value;
        this.frequency = frequency;
    }

    public HuffmanTreeNode(char value, int frequency, HuffmanTreeNode left, HuffmanTreeNode right) {
        this.value = value;
        this.frequency = frequency;
        this.left = left;
        this.right = right;
    }

    public boolean isLeaf() {
        return left == null && right == null;
    }

    public String encode(char c) {
        if (isLeaf()) {
            return value == c ? "" : null;
        } else {
            String left = this.left.encode(c);
            if (left != null) {
                return "0" + left;
            }
            String right = this.right.encode(c);
            if (right != null) {
                return "1" + right;
            }
            return null;
        }
    }

    public void print() {
        print("", true);
    }

    private void print(String prefix, boolean isTail) {
        System.out.println(prefix + (isTail ? "\\-- " : "|-- ") + "Node[value=" + value + ", freq=" + frequency + "]");
        if (left != null) {
            left.print(prefix + (isTail ? "    " : "|   "), right == null);
        }
        if (right != null) {
            right.print(prefix + (isTail ? "    " : "|   "), true);
        }
    }

    private void print(int level) {
        for (int i = 0; i < level; i++) {
            System.out.print("  ");
        }
        System.out.println("HuffmanTreeNode[value=" + value + ", frequency=" + frequency + ", leaf=" + isLeaf() + "]");
        if (left != null) {
            left.print(level + 1);
        }
        if (right != null) {
            right.print(level + 1);
        }
    }

    public char getValue() {
        return value;
    }

    public void setValue(char value) {
        this.value = value;
    }

    public int getFrequency() {
        return frequency;
    }

    public void setFrequency(int frequency) {
        this.frequency = frequency;
    }

    public HuffmanTreeNode getLeft() {
        return left;
    }

    public void setLeft(HuffmanTreeNode left) {
        this.left = left;
    }

    public HuffmanTreeNode getRight() {
        return right;
    }

    public void setRight(HuffmanTreeNode right) {
        this.right = right;
    }
}
